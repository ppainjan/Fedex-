package fedEx;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

public class OrderSimulation extends Thread{
	
	private Connection getDbConnection(){
		 
		Connection con = null;
		try {
			Class.forName("com.mysql.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fed_ex?autoReconnect=true&useSSL=false","root","root");
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e1) {
			e1.printStackTrace();
		}  
		return con;
	}
	
	public void run(){
		Connection con = getDbConnection();
		String orderStatusUpdateQuery = "INSERT INTO fed_ex.order_tracking(tracking_id,city,city_status,tracking_date)VALUES(?,?,?,?)";
		String orderInfoQuery = "Select tracking_id, order_shortest_travel,order_status,orders_curr_city from fed_ex.orders where tracking_id = ?";
		String updateOrderQuery = "Update fed_ex.orders set orders_curr_city = ?, order_status = ? where tracking_id = ?";
		
		PreparedStatement st_orderStatusUpdateQuery;
		PreparedStatement st_orderInfoQuery;
		PreparedStatement st_updateOrderQuery;
		
		while(true){
			for(int j=1;j<=100000;j++){
				try{
					st_orderInfoQuery = con.prepareStatement(orderInfoQuery);
					st_orderInfoQuery.setInt(1, j);
					ResultSet rs_orderInfoQuery = st_orderInfoQuery.executeQuery();
					rs_orderInfoQuery.next();
					
					String ShortestPath = rs_orderInfoQuery.getString(2);
					String status = rs_orderInfoQuery.getString(3);
					int curr_city = rs_orderInfoQuery.getInt(4);
					List<Integer> cityList = converter(ShortestPath);
					
					if(status != "Delivered"){
						if(curr_city == 0){
							st_orderStatusUpdateQuery = con.prepareStatement(orderStatusUpdateQuery);
							st_orderStatusUpdateQuery.setInt(1, j);
							st_orderStatusUpdateQuery.setInt(2, cityList.get(0));
							st_orderStatusUpdateQuery.setString(3, "Departed From "+cityList.get(0));
							st_orderStatusUpdateQuery.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
							st_orderStatusUpdateQuery.executeUpdate();
							st_orderStatusUpdateQuery.close();
							
							st_updateOrderQuery = con.prepareStatement(updateOrderQuery);
							st_updateOrderQuery.setInt(1, cityList.get(1));
							st_updateOrderQuery.setString(2, "In Transit");
							st_updateOrderQuery.executeUpdate();
							st_updateOrderQuery.close();
						}
						else if(lastCity(curr_city, cityList)){
							
							st_orderStatusUpdateQuery = con.prepareStatement(orderStatusUpdateQuery);
							st_orderStatusUpdateQuery.setInt(1, j);
							st_orderStatusUpdateQuery.setInt(2, curr_city);
							st_orderStatusUpdateQuery.setString(3, "Arrived At "+curr_city);
							st_orderStatusUpdateQuery.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
							st_orderStatusUpdateQuery.executeUpdate();
							st_orderStatusUpdateQuery.close();
							
							st_updateOrderQuery = con.prepareStatement(updateOrderQuery);
							st_updateOrderQuery.setInt(1, cityList.get(findCityLoc(curr_city,cityList)));
							st_updateOrderQuery.setString(2, "Delivered");
							st_updateOrderQuery.executeUpdate();
							st_updateOrderQuery.close();
							
						}
						
						else{
							
							st_orderStatusUpdateQuery = con.prepareStatement(orderStatusUpdateQuery);
							st_orderStatusUpdateQuery.setInt(1, j);
							st_orderStatusUpdateQuery.setInt(2, curr_city);
							st_orderStatusUpdateQuery.setString(3, "Arrived At "+curr_city);
							st_orderStatusUpdateQuery.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
							st_orderStatusUpdateQuery.executeUpdate();
							st_orderStatusUpdateQuery.close();
							st_updateOrderQuery.close();
							
							st_orderStatusUpdateQuery = con.prepareStatement(orderStatusUpdateQuery);
							st_orderStatusUpdateQuery.setInt(1, j);
							st_orderStatusUpdateQuery.setInt(2, curr_city);
							st_orderStatusUpdateQuery.setString(3, "Departed From "+curr_city);
							st_orderStatusUpdateQuery.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
							st_orderStatusUpdateQuery.executeUpdate();
							
							st_updateOrderQuery = con.prepareStatement(updateOrderQuery);
							st_updateOrderQuery.setInt(1, cityList.get(findCityLoc(curr_city,cityList)));
							st_updateOrderQuery.setString(2, "In Transit");
							st_updateOrderQuery.executeUpdate();
							st_updateOrderQuery.close();
							
						}
					}
					rs_orderInfoQuery.close();
					st_orderInfoQuery.close();
					
					
					
				}
				catch(SQLException se)
				{
					se.printStackTrace();
				}
			}
		}
		
	}
	
	private List<Integer> converter(String str){
		
		List<Integer> intList = new ArrayList<Integer>();
		String [] splitedData = str.split("@");
		for(int i=0;i<splitedData.length;i++){
			intList.add(Integer.parseInt(splitedData[i]));
		}
		return intList;
	}

	private int findCityLoc(int city, List<Integer> cityList){
		
		for(int i =0; i<cityList.size();i++){
			if(cityList.get(i) == city)
				return i;
		}
		return -1;
	}

	private boolean lastCity(int city, List<Integer> cityList){
		
		if(cityList.indexOf(city) == cityList.size()-1){
			return true;
		}
		return false;
	}





}
